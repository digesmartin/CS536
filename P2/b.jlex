import java_cup.runtime.*; // defines the Symbol class

// The generated scanner will return a Symbol for each token that it finds.
// A Symbol contains an Object field named value; that field will be of type
// TokenVal, defined below.
//
// A TokenVal object contains the line number on which the token occurs as
// well as the number of the character on that line that starts the token.
// Some tokens (literals and IDs) also include the value of the token.

class TokenVal {
  // fields
    int linenum;
    int charnum;
  // constructor
    TokenVal(int lnum, int cnum) {
        linenum = lnum;
        charnum = cnum;
    }
}

class IntLitTokenVal extends TokenVal {
  // new field: the value of the integer literal
    int intVal;
  // constructor
    IntLitTokenVal(int lnum, int cnum, int val) {
        super(lnum, cnum);
        intVal = val;
    }
}

class IdTokenVal extends TokenVal {
  // new field: the value of the identifier
    String idVal;
  // constructor
    IdTokenVal(int lnum, int cnum, String val) {
        super(lnum, cnum);
    idVal = val;
    }
}

class StrLitTokenVal extends TokenVal {
  // new field: the value of the string literal
    String strVal;
  // constructor
    StrLitTokenVal(int lnum, int cnum, String val) {
        super(lnum, cnum);
        strVal = val;
    }
}

// The following class is used to keep track of the character number at which
// the current token starts on its line.
class CharNum {
    static int num=1;
}

%%

DIGIT=        [0-9]
WHITESPACE=   [\040\t]
LETTER=       [a-z]

%implements java_cup.runtime.Scanner
%function next_token
%type java_cup.runtime.Symbol

%eofval{
return new Symbol(sym.EOF);
%eofval}

%line

%%

bool      {
            int symNum = sym.BOOL;
            Symbol S = new Symbol(symNum, new TokenVal(yyline+1, CharNum.num));
            CharNum.num += yytext().length();
            return S;
          }

int       {
            int symNum = sym.INT;
            Symbol S = new Symbol(symNum, new TokenVal(yyline+1, CharNum.num));
            CharNum.num += yytext().length();
            return S;
          }

void      {
            int symNum = sym.VOID;
            Symbol S = new Symbol(symNum, new TokenVal(yyline+1, CharNum.num));
            CharNum.num += yytext().length();
            return S;
          }

tru       {
            int symNum = sym.TRUE;
            Symbol S = new Symbol(symNum, new TokenVal(yyline+1, CharNum.num));
            CharNum.num += yytext().length();
            return S;
          }

fls       {
            int symNum = sym.FALSE;
            Symbol S = new Symbol(symNum, new TokenVal(yyline+1, CharNum.num));
            CharNum.num += yytext().length();
            return S;
          }

struct    {
            int symNum = sym.STRUCT;
            Symbol S = new Symbol(symNum, new TokenVal(yyline+1, CharNum.num));
            CharNum.num += yytext().length();
            return S;
          }

receive   {
            int symNum = sym.RECEIVE;
            Symbol S = new Symbol(symNum, new TokenVal(yyline+1, CharNum.num));
            CharNum.num += yytext().length();
            return S;
          }

print     {
            int symNum = sym.PRINT;
            Symbol S = new Symbol(symNum, new TokenVal(yyline+1, CharNum.num));
            CharNum.num += yytext().length();
            return S;
          }

if        {
            int symNum = sym.IF;
            Symbol S = new Symbol(symNum, new TokenVal(yyline+1, CharNum.num));
            CharNum.num += yytext().length();
            return S;
          }

else      {
            int symNum = sym.ELSE;
            Symbol S = new Symbol(symNum, new TokenVal(yyline+1, CharNum.num));
            CharNum.num += yytext().length();
            return S;
          }

while     {
            int symNum = sym.WHILE;
            Symbol S = new Symbol(symNum, new TokenVal(yyline+1, CharNum.num));
            CharNum.num += yytext().length();
            return S;
          }

ret       { 
            int symNum = sym.RETURN;
            Symbol S = new Symbol(symNum, new TokenVal(yyline+1, CharNum.num));
            CharNum.num += yytext().length();
            return S;

            //END OF THE RESERVED WORDS
          }

(_|{LETTER})(_|{LETTER}|{DIGIT})* {
            //START OF SPECIAL SEQUENCES
            //Identifier
            int symNum = sym.ID;
            String val = new String(yytext());
            IdTokenVal tokenVal = new IdTokenVal(yyline+1, CharNum.num, val);
            Symbol S = new Symbol(sym.ID, tokenVal);
            CharNum.num += val.length();
            return S;
          }

{DIGIT}+  { //Integer literal
            // NOTE: the following computation of the integer value does NOT
            //       check for overflow.  This must be changed.
            int val = (new Integer(yytext())).intValue();
            Symbol S = new Symbol(sym.INTLITERAL,
                             new IntLitTokenVal(yyline+1, CharNum.num, val));
            CharNum.num += yytext().length();
            return S;
          }

\".*      {
            //String literals
            int symNum = sym.ID;
            String val = new String(yytext());
            StrLitTokenVal tokenVal = new StrLitTokenVal(yyline+1, CharNum.num, val);
            Symbol S = new Symbol(sym.STRINGLITERAL, tokenVal);
            CharNum.num += val.length();
            return S;

            //END OF SPECIAL SEQUENCES
          }

"{"       { 
            //START OF ONE/TWO-CHARACTER SYMBOLS

            int symNum = sym.LCURLY;
            Symbol S = new Symbol(symNum, new TokenVal(yyline+1, CharNum.num));
            CharNum.num += yytext().length();
            return S;
          }

"}"       { 
            int symNum = sym.RCURLY;
            Symbol S = new Symbol(symNum, new TokenVal(yyline+1, CharNum.num));
            CharNum.num += yytext().length();
            return S;
          }

"("       { 
            int symNum = sym.LPAREN;
            Symbol S = new Symbol(symNum, new TokenVal(yyline+1, CharNum.num));
            CharNum.num += yytext().length();
            return S;
          }

")"       { 
            int symNum = sym.RPAREN;
            Symbol S = new Symbol(symNum, new TokenVal(yyline+1, CharNum.num));
            CharNum.num += yytext().length();
            return S;
          }

";"       { 
            int symNum = sym.SEMICOLON;
            Symbol S = new Symbol(symNum, new TokenVal(yyline+1, CharNum.num));
            CharNum.num += yytext().length();
            return S;
          }


","       { 
            int symNum = sym.COMMA;
            Symbol S = new Symbol(symNum, new TokenVal(yyline+1, CharNum.num));
            CharNum.num += yytext().length();
            return S;
          }

"."       { 
            int symNum = sym.DOT;
            Symbol S = new Symbol(symNum, new TokenVal(yyline+1, CharNum.num));
            CharNum.num += yytext().length();
            return S;
          }

"<<"       { 
            int symNum = sym.WRITE;
            Symbol S = new Symbol(symNum, new TokenVal(yyline+1, CharNum.num));
            CharNum.num += yytext().length();
            return S;
          }

">>"       { 
            int symNum = sym.READ;
            Symbol S = new Symbol(symNum, new TokenVal(yyline+1, CharNum.num));
            CharNum.num += yytext().length();
            return S;
          }

"++"      {
            int symNum = sym.PLUSPLUS;
            Symbol S = new Symbol(symNum, new TokenVal(yyline+1, CharNum.num));
            CharNum.num += yytext().length();
            return S;
          }

"--"       { 
            int symNum = sym.MINUSMINUS;
            Symbol S = new Symbol(symNum, new TokenVal(yyline+1, CharNum.num));
            CharNum.num += yytext().length();
            return S;
          }

"+"       { 
            int symNum = sym.PLUS;
            Symbol S = new Symbol(symNum, new TokenVal(yyline+1, CharNum.num));
            CharNum.num += yytext().length();
            return S;
          }

"-"       { 
            int symNum = sym.MINUS;
            Symbol S = new Symbol(symNum, new TokenVal(yyline+1, CharNum.num));
            CharNum.num += yytext().length();
            return S;
          }

"*"       { 
            int symNum = sym.TIMES;
            Symbol S = new Symbol(symNum, new TokenVal(yyline+1, CharNum.num));
            CharNum.num += yytext().length();
            return S;
          }

"/"       { 
            int symNum = sym.DIVIDE;
            Symbol S = new Symbol(symNum, new TokenVal(yyline+1, CharNum.num));
            CharNum.num += yytext().length();
            return S;
          }

"!"       { 
            int symNum = sym.NOT;
            Symbol S = new Symbol(symNum, new TokenVal(yyline+1, CharNum.num));
            CharNum.num += yytext().length();
            return S;
          }

"&&"       { 
            int symNum = sym.AND;
            Symbol S = new Symbol(symNum, new TokenVal(yyline+1, CharNum.num));
            CharNum.num += yytext().length();
            return S;
          }

"||"       {
            int symNum = sym.OR;
            Symbol S = new Symbol(symNum, new TokenVal(yyline+1, CharNum.num));
            CharNum.num += yytext().length();
            return S;
          }

"=="       { 
            int symNum = sym.EQUALS;
            Symbol S = new Symbol(symNum, new TokenVal(yyline+1, CharNum.num));
            CharNum.num += yytext().length();
            return S;
          }

"!="       { 
            int symNum = sym.NOTEQUALS;
            Symbol S = new Symbol(symNum, new TokenVal(yyline+1, CharNum.num));
            CharNum.num += yytext().length();
            return S;
          }

"<"       { 
            int symNum = sym.LESS;
            Symbol S = new Symbol(symNum, new TokenVal(yyline+1, CharNum.num));
            CharNum.num += yytext().length();
            return S;
          }

">"       { 
            int symNum = sym.GREATER;
            Symbol S = new Symbol(symNum, new TokenVal(yyline+1, CharNum.num));
            CharNum.num += yytext().length();
            return S;
          }

"<="       { 
            int symNum = sym.LESSEQ;
            Symbol S = new Symbol(symNum, new TokenVal(yyline+1, CharNum.num));
            CharNum.num += yytext().length();
            return S;
          }

">="       { 
            int symNum = sym.GREATEREQ;
            Symbol S = new Symbol(symNum, new TokenVal(yyline+1, CharNum.num));
            CharNum.num += yytext().length();
            return S;
          }

"="       { 
            int symNum = sym.ASSIGN;
            Symbol S = new Symbol(symNum, new TokenVal(yyline+1, CharNum.num));
            CharNum.num += yytext().length();
            return S;

            //END OF ONE/TWO-CHARACTER SYMBOLS
          } 

(///|###).* {
              //COMMENTS
              CharNum.num = 1;
            }

\n        { CharNum.num = 1; }

{WHITESPACE}+  { CharNum.num += yytext().length(); }

.         { ErrMsg.fatal(yyline+1, CharNum.num,
                         "ignoring illegal character: " + yytext());
            CharNum.num++;
          }
